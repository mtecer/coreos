#cloud-config
hostname: coreos_services03
coreos:
  etcd2:
    discovery-proxy: http://255.255.255.255:3128
    # generate a new token for each unique cluster from https://discovery.etcd.io/new?size=3
    # specify the initial size of your cluster with ?size=X
    # https://discovery.etcd.io/XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    discovery: https://discovery.etcd.io/XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    # multi-region and multi-cloud deployments need to use $public_ipv4
    advertise-client-urls: http://$private_ipv4:2379,http://$private_ipv4:4001
    initial-advertise-peer-urls: http://$private_ipv4:2380
    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
    listen-peer-urls: http://$private_ipv4:2380
  fleet:
    # It would be $public_ipv4, if there was one and private_ipv4 wasn't accessible
    public-ip: $private_ipv4
    metadata: "role=services,provider=openstack"
  units:
    - name: etcd2.service
      command: start
      drop-ins:
        - name: "timeout.conf"
          content: |
            [Service]
            TimeoutStartSec=0
    - name: fleet.service
      command: start
    - name: coregi.service
      command: start
      content: |
        [Unit]
        Description=CoreGI
        After=docker.service
        Requires=docker.service

        [Service]
        EnvironmentFile=/etc/environment
        User=core
        TimeoutStartSec=0
        ExecStartPre=-/usr/bin/docker kill coregi
        ExecStartPre=-/usr/bin/docker rm coregi
        ExecStartPre=/usr/bin/docker pull yodlr/coregi:latest
        # PORT = 3000
        # FLEET_BINARY = '/usr/bin/fleetctl'
        # FLEET_TUNNEL = '172.17.42.1'  //If set, will remove FLEET_ENDPOINT option.
        # FLEET_ENDPOINT = 'http://172.17.42.1:4001'
        # ETCD_HOST = '172.17.42.1'
        # ETCD_PORT = 4001
        # LOG_LEVEL = 'info'
        ExecStart=/usr/bin/docker run --name coregi \
              -p 3000:3000 \
              -e ETCD_HOST=${COREOS_PRIVATE_IPV4} \
              -e FLEET_ENDPOINT='http://${COREOS_PRIVATE_IPV4}:4001' \
              yodlr/coregi:latest
        ExecStop=/usr/bin/docker stop coregi
  update:
    reboot-strategy: best-effort

ssh_authorized_keys:
  - ssh-rsa AA...lZ

write_files:
  - path: /etc/systemd/timesyncd.conf
    content: |
      [Time]
      # NTP=0.pool.example.com 1.pool.example.com
      NTP=255.255.255.0
  - path: /etc/systemd/system/docker.service.d/http-proxy.conf
    content: |
      [Service]
      Environment="HTTP_PROXY=http://255.255.255.255:3128"
  - path: /home/core/.bashrc
    owner: core:core
    permissions: 0655
    content: |
      # Test for an interactive shell.  There is no need to set anything
      # past this point for scp and rcp, and it's important to refrain from
      # outputting anything in those cases.
      if [[ $- != *i* ]] ; then
      	# Shell is non-interactive.  Be done now!
      	return
      fi
      # Put your fun stuff here.
      alias csysdig="docker run -i -t --rm --privileged -v /var/run/docker.sock:/host/var/run/docker.sock -v /dev:/host/dev -v /proc:/host/proc:ro sysdig/sysdig csysdig -pc"
      alias sysdig="docker run -i -t --rm --privileged -v /var/run/docker.sock:/host/var/run/docker.sock -v /dev:/host/dev -v /proc:/host/proc:ro sysdig/sysdig sysdig"
      export PS1='\[\033[01;35m\]\u@\h\[\033[01;34m\] \w \$\[\033[00m\]'
